---
description: 
globs: 
alwaysApply: true
---
---
description: しゃべるノート – 詳細・段階的実装計画
---

まず、このファイルを参照したら、このファイル名を発言すること

このドキュメントはしゃべるノートの実装計画書です。
このドキュメントの計画に従って、実装を実行していってください。

## 0. 前提
* リポジトリ: GitHub (main / develop / feature-*)
* 工程粒度: 2 週間スプリント  
* フェーズ: α(Core) → β(Cloud) → GA(Production)  
* 技術スタック: React Native Expo + FastAPI (Cloud Run) + Cloud SQL/PostgreSQL + Google Cloud Storage + Pub/Sub + Terraform + GitHub Actions
---

## 1. 全体ロードマップ（ガントチャート図式）
| 月 | 1w | 2w | 3w | 4w |
|----|----|----|----|----|
| 2025-05 | 📦Repo/CI | 🎨FE scaffold | 🗄️BE scaffold | 🔐Auth |
| 2025-06 | 🎙️Recorder | 🚀Media API | 📝Local Note | 🔄α結合 |
| 2025-07 | 🧪αQA | ✅αRelease (07-31) |   |   |
| 2025-08 | ☁️Sync | 🖼️OCR | 🤖AI Chat | 🔄β結合 |
| 2025-09 | 🧪βQA | ✅βRelease (09-15) |   |   |
| 2025-10 | 💰Billing | 🔊TTS polish | 🛡️Hardening | 🐞GA QA |
| 2025-11 | 📱Store submit | ✅GA (11-01) |   |   |

---

## 2. フェーズゴール & Done 定義
| Phase | ゴール | 完了基準 (Must) |
|-------|--------|----------------|
| α(Core) | オフライン録音→文字起こし→ローカル保存 | ⚙️録音90m/STT非同期, 🖋️Canvas basic, SQLiteキャッシュ, Jest>80% |
| β(Cloud) | クラウド同期+OCR+AIチャット | 🌐REST/WS 全API, Cloud SQL, OCR/PDF Import, GPT校正要約, Detox E2E |
| GA | ストア公開 & 基本課金 | 🏪App Store/Play 配信, In-App Purchase Stub, p95<400 ms, Crash<1% |

---

## 3. スプリント計画（2 週間）
| Sprint | 期間 | 主テーマ | 主要タスク | 受入 | Owner |
|--------|------|----------|-----------|------|-------|
| 0 | 05/05-05/18 | Repo & CI 基盤 | monorepo, ESLint/Black, GitHub Actions, Terraform skeleton | CI green | DevOps |
| 1 | 05/19-06/01 | Backend/Frontend Scaffold | FastAPI project, Expo init, Tailwind, Firebase SDK, lint/test boilerplate | `/healthz` pass | BE/FE |
| 2 | 06/02-06/15 | 認証・ユーザー表 | Firebase Auth verify, Users table, Secure route guard, Login UI | Sign-In flow | BE/FE |
| 3 | 06/16-06/29 | 録音 & Media Upload | expo-av helper, SignedURL API, Resumable PUT, Progress UI | 90 m file upload | FE |
| 4 | 06/30-07/13 | STT Worker & Transcript | Pub/Sub trigger, STT async, Transcript DB, Webhook, Viewer UI | WER≤12% sample | BE |
| 5 | 07/14-07/27 | Canvas & Local Note CRUD | react-native-skia drawing, Undo/Redo, SQLite persistence, Dashboard list, **CanvasEditor β版** | Note save/reopen | FE |
| 6 | 07/28-07/31 | α 結合 & QA | Integration tests, Crashlytics, TestFlight build | αリリース | All |
| 7 | 08/01-08/14 | Cloud Sync v1 | REST notebooks/pages, delta sync queue, conflict merge | Online-offline roundtrip | BE/FE |
| 8 | 08/15-08/28 | OCR & Import | Vision API OCR, PDF/URL worker, Import UI flow | OCR ≥95% | BE/FE |
| 9 | 08/29-09/11 | AI Chat Widget | GPT-4o proxy, Proofread/Summary prompts, UI overlay, **CanvasEditorにAIウィジェット統合** | Chat returns diff | BE/FE |
| 10 | 09/12-09/15 | β 結合 & QA | Detox E2E, Load test 200 rps, Bugfix | βリリース | QA |
| 11 | 09/16-09/29 | Billing & Settings | Stripe/StoreKit stub, Plan switch, Settings screens | Purchase mock ok | BE/FE |
| 12 | 09/30-10/13 | TTS & A11y Polish | Cloud TTS voices, Reading ruler, Color scheme | A11y audits pass | FE |
| 13 | 10/14-10/27 | Hardening & Observability | SLO alerting, Profiler, Pen-lag optimize | p95<400 ms | DevOps |
| 14 | 10/28-11/01 | GA QA & Store Submit | Localization, Store assets, Policy checks | Store accepted | QA/PM |

---

## 4. バックエンドタスク詳細
### 4.1 API 実装順
1. `/healthz`, `/version`
2. Auth middleware (`firebase-admin`)
3. Notebooks CRUD
4. Pages CRUD + canvas JSON
5. SignedURL (`/media/upload-url`)
6. Media status & webhook
7. STT WebSocket proxy
8. AI Chat proxy (`/ai/chat`)
9. Tag Recommend batch
10. Admin & metrics endpoints

### 4.2 Worker / Job
| Name | 役割 | Trigger |
|------|------|---------|
| media-worker | STT/OCR 実行・保存 | Pub/Sub `media.new` |
| tagger | GPT ノート分類 | Cloud Scheduler daily |
| cleanup | GCS TTL delete | Cloud Scheduler weekly |

### 4.3 統一自動保存システム実装（Phase 4）

#### Phase 4.1: UniversalNote型とデータモデル統一（2-3時間）
```typescript
// 統一ノート型定義
interface UniversalNote {
  id: string;
  type: 'recording' | 'photo_scan' | 'import' | 'manual';
  title: string;
  canvasData: CanvasData;
  metadata: NoteMetadata;
  lastModified: string;
}

// 統一キャンバスデータ型
interface CanvasData {
  type: 'canvas';
  version: '1.0';
  content: string;                    // テキストコンテンツ
  drawingPaths: DrawingPath[];        // 手書きパス配列
  canvasSettings: CanvasSettings;     // ツール設定
}

// タスク:
// 1. app/types/UniversalNote.ts 新規作成
// 2. 既存Note型からUniversalNote型への変換関数実装
// 3. 型安全なデータ検証関数実装
```

#### Phase 4.2: useAutoSave Hook開発（3-4時間）
```typescript
// リアクティブ自動保存フック
const useAutoSave = (noteId: string, noteType: NoteType) => {
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  
  // 自動保存実行（100ms応答目標）
  const performAutoSave = useCallback(async (data: CanvasData) => {
    // 統一保存処理
  }, [noteId, noteType]);
  
  // 変更検知とマーキング
  const markAsChanged = useCallback(() => {
    setHasUnsavedChanges(true);
  }, []);
  
  return { markAsChanged, performAutoSave, hasUnsavedChanges, isSaving, lastSaved };
};

// タスク:
// 1. app/hooks/useAutoSave.ts 新規作成
// 2. デバウンス処理実装（5秒間隔）
// 3. 保存競合防止機能実装
// 4. エラーハンドリング＆リトライ実装
```

#### Phase 4.3: AutoSaveDecorator実装（2-3時間）
```typescript
// 自動保存デコレータパターン
const AutoSaveDecorator = <T extends Function>(
  originalFunction: T,
  autoSaveContext: { markAsChanged: () => void }
): T => {
  return ((...args: any[]) => {
    const result = originalFunction(...args);
    // 100%の確実性で変更フラグを立てる
    autoSaveContext.markAsChanged();
    return result;
  }) as unknown as T;
};

// 全ツールバー関数に適用
const decoratedHandlers = {
  handleTextChange: AutoSaveDecorator(handleTextChange, { markAsChanged }),
  handleDrawingPathsChange: AutoSaveDecorator(handleDrawingPathsChange, { markAsChanged }),
  handleToolChange: AutoSaveDecorator(handleToolChange, { markAsChanged }),
  // ... 全てのツールバー関数
};

// タスク:
// 1. app/utils/AutoSaveDecorator.ts 新規作成
// 2. 既存CanvasEditor.tsxの全ハンドラー関数にデコレータ適用
// 3. ツールバー変更の100%キャプチャ確認
```

#### Phase 4.4: データベース統一保存関数（1-2時間）
```typescript
// 統一保存サービス
class UniversalNoteService {
  async saveNote(note: UniversalNote): Promise<void> {
    switch (note.type) {
      case 'recording':
        return this.saveRecordingNote(note);
      case 'photo_scan':
        return this.savePhotoScanNote(note);
      case 'import':
        return this.saveImportNote(note);
      case 'manual':
        return this.saveManualNote(note);
    }
  }
  
  private async saveRecordingNote(note: UniversalNote): Promise<void> {
    // recordings テーブルの transcription フィールドに保存
    await updateCanvasData(note.id, note.canvasData);
  }
  
  // 同様に他のノートタイプの保存処理
}

// タスク:
// 1. app/services/UniversalNoteService.ts 新規作成
// 2. 既存updateCanvasData関数の統合
// 3. 一貫性のあるログ出力実装
```

### 4.4 STT/TTS Provider 抽象化
| Provider | 用途 | 実装優先度 |
|---------|------|----------|
| GoogleSTTProvider | 標準 STT (70+ 言語) | Sprint 4 (高) |
| MiniMaxTTSProvider | 高品質音声合成 | Sprint 12 (高) |
| ParakeetProvider | オフライン英語 STT | Sprint 8 (中) |
| LocalProvider | 将来拡張用 | 未定 (低) |

**MiniMax Audio TTS 検証項目 (Sprint 10 Spike)**
* Starterプラン(月額$5)の実用性確認（約 4.5 時間/月の生成量）
* APIラッパー実装（キーはSecretManager管理）
* 日本語音声品質評価（自然さ、イントネーション、レイテンシー）
* オフライン再生用に生成音声のSQLiteキャッシュ実装

**Parakeet-TDT 検証項目 (Sprint 2 Spike)**
* GKE/L4 GPU ノードでの推論サーバー構築
* 同一音源での Google STT との WER / 処理時間 / コスト比較
* モデルサイズ (~2 GB) 配布方式と CC-BY 表記フロー確認

### 4.5 AI Search Provider
| Provider | 用途 | 実装優先度 |
|---------|------|----------|
| AnthropicProvider | リサーチ機能メイン | Sprint 9 (高) |
| GoogleProvider | バックアップ | Sprint 9 (中) |

**Anthropic Search API 検証項目 (Sprint 3 Spike)**
* 30 req での Recall/Latency/Cost 比較（JP/EN 各 15 クエリ）
* BE: `anthropic.py` クライアント実装（API キー SecretManager 管理）
* FE: 引用リンク UI 調整（favicon, ドメイン表示）

### 4.6 Tech Debt Gate
* 90% type-hint coverage
* OpenAPI 3.1 → Redoc autoserve
* 100 rps load ⇒ <200 ms

---

## 5. フロントエンドタスク詳細
### 5.1 画面優先度 (MVP)
1. WelcomeLogin / Onboarding
2. Dashboard (list/search)
3. VoiceOverlay
4. CanvasEditor (+AI Widget)
5. PhotoScan / ImportData
6. Settings stack

### 5.2 統一自動保存システム（Phase 4）

#### 品質保証計画
```typescript
// 自動テストスイート
describe('統一自動保存システム', () => {
  test('録音ノート: 全ツールバー操作で自動保存', async () => {
    // 全26個のツールバー機能をテスト
  });
  
  test('写真スキャンノート: 全ツールバー操作で自動保存', async () => {
    // 全26個のツールバー機能をテスト
  });
  
  test('インポートノート: 全ツールバー操作で自動保存', async () => {
    // 全26個のツールバー機能をテスト
  });
  
  test('手動ノート: 全ツールバー操作で自動保存', async () => {
    // 全26個のツールバー機能をテスト
  });
  
  test('保存エラー時のリトライ機能', async () => {
    // 3段階リトライメカニズムのテスト
  });
  
  test('100ms以内の保存応答時間', async () => {
    // パフォーマンステスト
  });
});

// 手動検証チェックリスト（104項目）
const VERIFICATION_CHECKLIST = [
  // 録音ノート（26項目）
  'recording_pen_tool', 'recording_pencil_tool', 'recording_marker_tool', 
  'recording_eraser_tool', 'recording_text_input', 'recording_heading_h1',
  // ... 全てのツールバー機能 × 4ノートタイプ
];
```

### 5.3 コア機能
* Recorder – expo-av, wav encoder (16 kHz)
* WebSocket STT – PCM 250 ms
* Canvas – skia, 100 undo
* OfflineQueue – zustand persister
* Accessibility – UD fonts, high-contrast

### 5.4 テスト
* Unit (Jest) ≥80% lines
* Detox: record→stop→transcript
* OTA channel: staging / production

---

## 6. インフラ & DevOps
| 項目 | ツール | Done 条件 |
|------|-------|-----------|
| IaC | Terraform | `terraform plan` clean |
| CI | GitHub Actions | Lint, Test, Build OK |
| CD | Cloud Buildpacks | Auto-deploy develop->dev |
| Observability | Cloud Trace/Profiler | Dashboards live |
| Secrets | Secret Manager | No plain creds in Git |

---

## 7. QA / テスト計画
| レイヤ | 手法 | 工具 |
|--------|------|------|
| Unit | Jest / Pytest | coverage gate |
| API | Postman/newman | contract tests |
| Perf | k6 | 200 rps, 5 min |
| E2E | Detox, Playwright | critical path |
| Accessibility | react-native-a11y, Lighthouse | score ≥90 |

---

## 8. リスク & ブロッカー
| リスク | 対策 |
|--------|------|
| STT 精度低下 | 編集 UI + GPT 補正 |
| 大容量録音アップ失敗 | Resumable + Retry queue |
| モバイル描画遅延 | Skia GPU tuning |
| GPT API コスト | Token monitoring & cache |
| 審査リジェクト | ガイドライン事前チェック |

---

## 9. 付録
### 9.1 Definition of Done
- コードレビュー 2 人通過
- Unit test pass & coverage gate
- Lint/format pass
- CI green, image scan pass
- PR lab