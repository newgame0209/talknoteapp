---
description: 
globs: 
alwaysApply: true
---
---
description: しゃべるノートのタスク管理ルール
---

まず、このファイルを参照したら、このファイル名を発言すること

## タスク管理

### タスク管理の方法

1.  [todo.mdc](mdc:.cursor/rules/todo.mdc)ファイルを使用してタスクを管理してください。
2. 各タスクは以下の形式で記録：

   ```markdown
   - [ ] タスクの説明
     - 詳細な手順や注意点
     - 依存関係
     - 見積時間
   ```

3. タスクのステータス管理：

   - [ ] 未着手
   - [x] 完了
   - [~] 進行中
   - [!] 問題あり

4. タスクの優先順位付け：
   - 🔴 緊急
   - 🟡 重要
   - 🟢 通常
   - ⚪ 低優先

### タスクの更新ルール

1. タスクの追加

   - 新しい要件や問題が発見された場合
   - 依存関係が明確になった場合
   - リファクタリングが必要な場合

2. タスクの更新

   - 進捗状況の変更
   - 新しい情報の追加
   - 依存関係の変更

3. タスクの完了
   - 実装の完了
   - テストの完了
   - レビューの完了

### タスクの追跡

1. 日次更新

   - 進捗状況の確認
   - ブロッカーの特定
   - 次のアクションの決定

2. 週次レビュー

   - 完了タスクの確認
   - 未完了タスクの再評価
   - 新規タスクの追加

3. 月次振り返り
   - パフォーマンスの評価
   - 改善点の特定
   - 次のマイルストーンの設定

## 重要事項

1. 機能の実装後に、毎回 @todo.md を確認＆更新をしてください。
2. 私が言わなくても中身は随時更新するようにしてください。更新しないと私が解雇されます。あなたの責任になってしまいます。
3. 機能は増やしても構いません。ただ、最初から機能を増やしすぎないでください。

# しゃべるノート プロジェクト進捗状況

最終更新: 2025-05-26 18:30

## 🚀 Sprint 1 進捗状況

### バックエンド

| タスク | 状態 | 完了日 | 担当者 |
|-------|------|-------|-------|
| Auth ミドルウェア完成（Firebase ID Token検証） | ✅ 完了 | 2025-05-21 | - |
| Usersテーブル & マイグレーション | ✅ 完了 | 2025-05-21 | - |
| CI/Lint/Test基盤完成 | ✅ 完了 | 2025-05-21 | - |
| Terraform skeleton | ✅ 完了 | 2025-05-21 | - |
| /version & /metrics エンドポイント | ✅ 完了 | 2025-05-21 | - |
| 認証フロードキュメント追加 | ✅ 完了 | 2025-05-21 | - |
| STT WebSocketサーバー実装 | ✅ 完了 | 2025-05-26 | - |
| Unit Test拡充（カバレッジ40%目標） | 🔄 進行中 | - | - |
| フロントエンド連携確認 | ✅ 完了 | 2025-05-26 | - |

### フロントエンド

| タスク | 状態 | 完了日 | 担当者 |
|-------|------|-------|-------|
| Expo SDK 53への移行 | ✅ 完了 | 2025-05-15 | - |
| SQLiteローカルキャッシュ基本実装 | ✅ 完了 | 2025-05-17 | - |
| 録音画面UI/UX改善 | ✅ 完了 | 2025-05-21 | - |
| 録音機能エラー修正 | ✅ 完了 | 2025-05-21 | - |
| インポート機能コンポーネント作成 | ✅ 完了 | 2025-05-21 | - |
| ダッシュボード画面の実装 | ✅ 完了 | 2025-05-25 | - |
| リアルタイム文字起こし機能（フェーズ1） | ✅ 完了 | 2025-05-26 | - |
| 録音データのローカル保存機能 | ✅ 完了 | 2025-05-26 | - |
| TypeScript設定の健全化 | 🔄 進行中 | - | - |
| SQLiteサービスのリファクタリング | 🔄 進行中 | - | - |
| UIエラー修正と型整備 | 🔄 進行中 | - | - |
| NativeWind & PostCSS安定化 | 🔄 進行中 | - | - |
| ストア/同期ロジック実装 | 📅 予定 | - | - |

## 📊 全体進捗

### バックエンド
- **Sprint 1**: 88% 完了（9項目中8項目完了）
- **全体**: 35% 完了

### フロントエンド
- **Sprint 1**: 75% 完了（13項目中9項目完了）
- **全体**: 40% 完了

## 🚧 現在のブロッカー

1. nativewindのCSS非同期処理エラー
   - 状態: 🔄 対応中
   - 対応: babel.config.jsとpostcss.config.jsの設定を修正中

## 📝 次の実装タスク（優先順位順）

### 🔴 緊急タスク
1. ~~録音データのローカル保存機能~~ ✅ 完了
   - ~~録音停止時にSQLiteに保存~~
   - ~~ノートの自動生成~~
   - ~~ダッシュボードへの反映~~

### 🟡 重要タスク
1. **ノート詳細画面（CanvasEditor）の実装**
   - 文字起こし結果の表示・編集
   - 手書き機能の基本実装
   - AIチャットウィジェットの準備

2. **メディアアップロード機能**
   - 録音ファイルのCloud Storageアップロード
   - 署名付きURL APIの実装
   - アップロード進捗表示

### 🟢 通常タスク
3. **AIタイトル自動生成機能**
   - 録音終了後、AI（GPT-4o等）でタイトルを自動生成
   - 生成中は「AIがタイトルを生成中…」と表示
   - タイトルが確定したら自動で反映

4. **録音画面でのタイトル編集機能**
   - 録音中または録音後にタイトルを手動で編集できるUIを追加

5. **インポート機能の統合**
   - FilePickerAreaの完成
   - ImportProgressScreenの実装
   - PDFやURLからのインポート

6. **写真スキャン（OCR）機能**
   - カメラ機能の実装
   - Vision API連携
   - テキスト抽出と編集

## 📌 最新の技術的成果（2025-05-26）

### リアルタイム文字起こし機能の完成
- **実装内容**:
  1. WebSocket経由でのGoogle STT連携
  2. 中間結果と最終結果の適切な表示
  3. リアルタイム感のあるUI/UX
- **技術的改善**:
  1. 音声データ送信間隔の最適化（250ms）
  2. 重複表示の解消
  3. 中間結果の視覚的区別（グレー・イタリック体）
- **状態**: ✅ 完全動作確認済み

### 録音データのローカル保存機能の完成
- **実装内容**:
  1. expo-sqliteを使用したローカルデータベース
  2. 録音停止時の自動保存
  3. ダッシュボードでの録音データ表示
- **技術的詳細**:
  1. 文字起こし結果の最初の50文字をタイトルとして使用
  2. 音声タイプのノートにマイクアイコンを表示
  3. 画面フォーカス時のデータ再読み込み
- **状態**: ✅ 完全動作確認済み