import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Image,
  ActivityIndicator,
  Alert,
  StatusBar,
} from 'react-native';
import { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';
import { useNavigation, useRoute, RouteProp } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import { importApi } from '../../services/api';
import { UniversalNoteService } from '../../services/UniversalNoteService';

// Êñ∞„Åó„ÅÑ„Éë„É©„É°„Éº„ÇøÂûãÂÆöÁæ©
type ImportProgressParams = {
  importId: string;
  importType: 'url' | 'file';
  source: string;
  file?: {
    name: string;
    uri: string;
    type: string;
    size: number;
  };
};

type ImportProgressRouteProp = RouteProp<{ ImportProgress: ImportProgressParams }, 'ImportProgress'>;

interface ImportStatus {
  status: 'pending' | 'processing' | 'completed' | 'failed';
  progress: number;
  message?: string;
  error?: string;
  result?: {
    note_id: string;
    title: string;
    total_pages: number;
  };
}

const ImportProgressScreen: React.FC = () => {
  const navigation = useNavigation<StackNavigationProp<any>>();
  const route = useRoute<ImportProgressRouteProp>();
  const [status, setStatus] = useState<ImportStatus>({
    status: 'pending',
    progress: 0
  });
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const navigationDoneRef = useRef<boolean>(false); // üö® ‰∫åÈáçÈÅ∑ÁßªÈò≤Ê≠¢„Éï„É©„Ç∞

  useEffect(() => {
    if (!route.params?.importId) {
      setErrorMessage('„Ç§„É≥„Éù„Éº„ÉàID„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
      return;
    }

    // „Ç§„É≥„Éù„Éº„ÉàÈÄ≤Êçó„ÅÆÁõ£Ë¶ñ„ÇíÈñãÂßã
    startProgressPolling(route.params.importId);
    
    // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÈñ¢Êï∞
    return () => {
      if (pollingIntervalRef.current) {
        clearInterval(pollingIntervalRef.current);
      }
    };
  }, []);

  // „Ç§„É≥„Éù„Éº„ÉàÈÄ≤Êçó„ÅÆÁõ£Ë¶ñ
  const startProgressPolling = async (importId: string) => {
    try {
      // ÊúÄÂàù„Å´‰∏ÄÂ∫¶„ÉÅ„Çß„ÉÉ„ÇØ
      await checkImportStatus(importId);

      // 2ÁßíÈñìÈöî„ÅßÈÄ≤Êçó„Çí„Éù„Éº„É™„É≥„Ç∞
      pollingIntervalRef.current = setInterval(async () => {
        await checkImportStatus(importId);
      }, 2000);

    } catch (error) {
      console.error('‚ùå ÈÄ≤ÊçóÁõ£Ë¶ñ„Ç®„É©„Éº:', error);
      setErrorMessage('ÈÄ≤Êçó„ÅÆÁõ£Ë¶ñ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
  };

  // „Ç§„É≥„Éù„Éº„ÉàÁä∂Ê≥Å„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  const checkImportStatus = async (importId: string) => {
    try {
      const statusResponse = await importApi.getImportStatus(importId);
      console.log('üìä „Ç§„É≥„Éù„Éº„ÉàÈÄ≤Êçó:', statusResponse);

      setStatus(statusResponse);

      // ÂÆå‰∫Ü„Åæ„Åü„ÅØÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØ„Éù„Éº„É™„É≥„Ç∞„ÇíÂÅúÊ≠¢
      if (statusResponse.status === 'completed') {
        if (pollingIntervalRef.current) {
          clearInterval(pollingIntervalRef.current);
        }

        // ÁµêÊûú„ÇíÂèñÂæó„Åó„Å¶„Éé„Éº„ÉàÁîªÈù¢„Å´ÈÅ∑ÁßªÔºàAI„Çø„Ç§„Éà„É´ÁîüÊàê„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ‰ªò„ÅçÔºâ
        setTimeout(async () => {
          try {
            const resultResponse = await importApi.getImportResultWithFallback(importId);
            console.log('üìÑ „Ç§„É≥„Éù„Éº„ÉàÁµêÊûúÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ‰ªò„ÅçÔºâ:', resultResponse);
            
            // üîç „Éá„Éê„ÉÉ„Ç∞Ôºö„Ç§„É≥„Éù„Éº„ÉàÁµêÊûú„ÅÆË©≥Á¥∞ÊßãÈÄ†„ÇíÁ¢∫Ë™ç
            console.log('üîç „Éá„Éê„ÉÉ„Ç∞ - „Ç§„É≥„Éù„Éº„ÉàÁµêÊûúË©≥Á¥∞:');
            console.log('  - note_id:', resultResponse.note_id);
            console.log('  - title:', resultResponse.title);
            console.log('  - total_pages:', resultResponse.total_pages);
            console.log('  - pagesÈÖçÂàó:', resultResponse.pages);
            if (resultResponse.pages && resultResponse.pages.length > 0) {
              resultResponse.pages.forEach((page: any, index: number) => {
                console.log(`  - „Éö„Éº„Ç∏${index + 1}:`, {
                  page_number: page.page_number,
                  text_length: page.text_length,
                  text_preview: page.text ? page.text.substring(0, 100) + '...' : '(Á©∫)',
                  has_text: !!page.text
                });
              });
            }

            if (resultResponse.note_id && resultResponse.title && resultResponse.pages) {
              // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Çø„Ç§„Éà„É´ÁîüÊàê„ÅÆÈÄöÁü•
              if (resultResponse.fallback_title_generated) {
                console.log('ü§ñ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Åß„Çø„Ç§„Éà„É´ÁîüÊàê„Åó„Åæ„Åó„Åü:', resultResponse.title);
              }
              
              // üî• UniversalNoteService„Åß„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Å´„Éé„Éº„Éà„Çí‰ΩúÊàê
              console.log('üìù „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Åß„Éé„Éº„Éà‰ΩúÊàêÈñãÂßã...');
              const universalNoteService = new UniversalNoteService();
              const createdNote = await universalNoteService.createNoteFromImport(resultResponse);
              
              if (!createdNote) {
                throw new Error('„Éé„Éº„Éà„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
              }
              
              console.log('‚úÖ „Éé„Éº„Éà‰ΩúÊàêÂÆå‰∫Ü:', createdNote.id);
              
              // üö® CRITICAL: ‰∫åÈáçÈÅ∑ÁßªÈò≤Ê≠¢ - ‰∏ÄÂ∫¶„Å†„ÅëÂÆüË°å
              if (navigationDoneRef.current) {
                console.log('üö´ ÈÅ∑Áßª„ÅØÊó¢„Å´ÂÆüË°åÊ∏à„Åø - „Çπ„Ç≠„ÉÉ„Éó');
                return;
              }
              navigationDoneRef.current = true;
              
              // ‰ΩúÊàê„Åï„Çå„Åü„Éé„Éº„Éà„ÅÆID„ÅßCanvasEditor„Å´ÈÅ∑Áßª
              navigation.replace('CanvasEditor', { 
                noteId: createdNote.id,
                noteType: 'import'
              });
            } else {
              console.error('‚ùå „Ç§„É≥„Éù„Éº„ÉàÁµêÊûú„Åå‰∏çÂÆåÂÖ®:', resultResponse);
              setErrorMessage('„Éé„Éº„Éà„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
          } catch (error) {
            console.error('‚ùå ÁµêÊûúÂèñÂæó„Ç®„É©„Éº:', error);
            setErrorMessage('„Ç§„É≥„Éù„Éº„ÉàÁµêÊûú„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
          }
        }, 1500);

      } else if (statusResponse.status === 'failed') {
        if (pollingIntervalRef.current) {
          clearInterval(pollingIntervalRef.current);
        }
        setErrorMessage(statusResponse.error || '„Ç§„É≥„Éù„Éº„ÉàÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }

    } catch (error) {
      console.error('‚ùå Áä∂Ê≥Å„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', error);
      setErrorMessage('„Ç§„É≥„Éù„Éº„ÉàÁä∂Ê≥Å„ÅÆÁ¢∫Ë™ç‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
  };

  // „Ç§„É≥„Éù„Éº„Éà„Çí„Ç≠„É£„É≥„Çª„É´
  const cancelImport = () => {
    Alert.alert(
      '„Ç§„É≥„Éù„Éº„Éà„Çí„Ç≠„É£„É≥„Çª„É´',
      '„Ç§„É≥„Éù„Éº„ÉàÂá¶ÁêÜ„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åô„ÅãÔºü',
      [
        {
          text: '„ÅÑ„ÅÑ„Åà',
          style: 'cancel',
        },
        {
          text: '„ÅØ„ÅÑ',
          onPress: () => {
            if (pollingIntervalRef.current) {
              clearInterval(pollingIntervalRef.current);
            }
            navigation.goBack();
          },
        },
      ]
    );
  };

  // „Çπ„ÉÜ„Éº„Çø„Çπ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÁîüÊàê
  const getStatusMessage = () => {
    switch (status.status) {
      case 'pending':
        return '„Ç§„É≥„Éù„Éº„ÉàÂá¶ÁêÜ„ÇíÈñãÂßã„Åó„Å¶„ÅÑ„Åæ„Åô...';
      case 'processing':
        return status.message || '„Éï„Ç°„Ç§„É´„ÇíÂá¶ÁêÜ‰∏≠„Åß„Åô...';
      case 'completed':
        return '„Ç§„É≥„Éù„Éº„Éà„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ';
      case 'failed':
        return '„Ç§„É≥„Éù„Éº„ÉàÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';
      default:
        return 'Âá¶ÁêÜ‰∏≠„Åß„Åô...';
    }
  };

  // „Ç¢„Ç§„Ç≥„É≥„ÅÆÈÅ∏Êäû
  const getFileIcon = () => {
    if (route.params?.importType === 'url') {
      return 'web';
    }
    
    if (route.params?.file?.type) {
      const fileType = route.params.file.type;
      if (fileType.includes('pdf')) return 'file-pdf-box';
      if (fileType.includes('image')) return 'file-image';
      if (fileType.includes('audio')) return 'file-music';
      if (fileType.includes('text')) return 'file-document-outline';
    }
    
    return 'file-document';
  };

  // „Éê„Ç§„ÉàÊï∞„ÇíË™≠„Åø„ÇÑ„Åô„ÅÑÂΩ¢Âºè„Å´Â§âÊèõ
  const formatBytes = (bytes: number) => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
  };

  return (
    <View style={styles.container}>
      <StatusBar barStyle="dark-content" />

      <View style={styles.content}>
        {errorMessage ? (
          <View style={styles.errorContainer}>
            <Ionicons name="alert-circle" size={48} color="#EF4444" />
            <Text style={styles.errorText}>{errorMessage}</Text>
            <TouchableOpacity
              style={styles.retryButton}
              onPress={() => navigation.goBack()}
            >
              <Text style={styles.retryButtonText}>Êàª„Çã</Text>
            </TouchableOpacity>
          </View>
        ) : (
          <>
            <View style={styles.aiCharacterContainer}>
              <Image 
                source={require('../../assets/ai_assistant2.png')} 
                style={styles.aiCharacterImage} 
              />
            </View>
            
            <View style={styles.messageContainer}>
              <Text style={styles.messageText}>
                {getStatusMessage()}
              </Text>
            </View>

            <Text style={styles.statusText}>
              {status.status === 'processing' ? '„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠' : 'Âá¶ÁêÜÂÆå‰∫Ü'}
            </Text>

            <View style={styles.loaderContainer}>
              <ActivityIndicator size="large" color="#589ff4" style={styles.loader} />
            </View>

            <Text style={styles.processingText}>
              {status.status === 'processing' ? 'Âá¶ÁêÜ‰∏≠„Åß„Åô„ÄÇ„Åó„Å∞„Çâ„Åè„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ...' : '„Éé„Éº„Éà„ÇíÊ∫ñÂÇô„Åó„Å¶„ÅÑ„Åæ„Åô...'}
            </Text>

            <View style={styles.fileInfoContainer}>
              <View style={styles.fileInfo}>
                <MaterialCommunityIcons
                  name={getFileIcon()}
                  size={24}
                  color="#589ff4"
                />
                <Text style={styles.fileName} numberOfLines={1} ellipsizeMode="middle">
                  {route.params?.importType === 'url' 
                    ? route.params.source
                    : route.params?.file?.name || route.params?.source || '„Éï„Ç°„Ç§„É´'}
                </Text>
              </View>

              <View style={styles.progressBarContainer}>
                <View style={[styles.progressBar, { width: `${status.progress * 100}%` }]} />
              </View>
              
              <View style={styles.progressInfoContainer}>
                <Text style={styles.progressPercentage}>{Math.round(status.progress * 100)}%</Text>
                <Text style={styles.progressText}>
                  {route.params?.importType === 'url' 
                    ? 'URL„Åã„Çâ„Ç§„É≥„Éù„Éº„Éà‰∏≠' 
                    : route.params?.file?.size ? formatBytes(route.params.file.size) : '„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫‰∏çÊòé'}
                </Text>
              </View>
            </View>

            {status.status === 'processing' && (
              <TouchableOpacity style={styles.cancelButton} onPress={cancelImport}>
                <Text style={styles.cancelButtonText}>„Ç≠„É£„É≥„Çª„É´</Text>
              </TouchableOpacity>
            )}
          </>
        )}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
    paddingTop: 60, // iPhone„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ„Éê„ÉºÂØæÂøú
  },
  content: {
    flex: 1,
    padding: 24,
    alignItems: 'center',
    justifyContent: 'center',
  },
  messageContainer: {
    backgroundColor: '#EBF5FF',
    borderRadius: 8,
    padding: 16,
    marginBottom: 24,
    width: '100%',
    alignItems: 'center',
  },
  messageText: {
    fontSize: 16,
    color: '#1F2937',
    lineHeight: 22,
    textAlign: 'center',
  },
  statusText: {
    fontSize: 22,
    fontWeight: '700',
    color: '#1F2937',
    marginBottom: 24,
    textAlign: 'center',
  },
  loaderContainer: {
    marginBottom: 24,
    alignItems: 'center',
    justifyContent: 'center',
  },
  loader: {
    marginVertical: 8,
  },
  processingText: {
    fontSize: 16,
    color: '#4B5563',
    marginBottom: 32,
    textAlign: 'center',
  },
  aiCharacterContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 16,
  },
  aiCharacterImage: {
    width: 100,
    height: 100,
    resizeMode: 'contain',
  },
  fileInfoContainer: {
    width: '100%',
    backgroundColor: '#F9FAFB',
    borderRadius: 8,
    padding: 16,
    marginBottom: 24,
  },
  fileInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  fileName: {
    fontSize: 14,
    color: '#1F2937',
    marginLeft: 8,
    flex: 1,
  },
  progressBarContainer: {
    height: 8,
    backgroundColor: '#E5E7EB',
    borderRadius: 4,
    overflow: 'hidden',
    marginBottom: 8,
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#589ff4',
    borderRadius: 4,
  },
  progressInfoContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  progressPercentage: {
    fontSize: 14,
    color: '#1F2937',
    fontWeight: '500',
  },
  progressText: {
    fontSize: 12,
    color: '#6B7280',
    textAlign: 'right',
  },
  cancelButton: {
    paddingVertical: 10,
    paddingHorizontal: 24,
    borderRadius: 8,
    backgroundColor: '#F3F4F6',
    marginTop: 16,
  },
  cancelButtonText: {
    fontSize: 16,
    color: '#4B5563',
    fontWeight: '500',
  },
  errorContainer: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  errorText: {
    fontSize: 16,
    color: '#EF4444',
    textAlign: 'center',
    marginTop: 16,
    marginBottom: 24,
  },
  retryButton: {
    backgroundColor: '#4F46E5',
    paddingVertical: 10,
    paddingHorizontal: 24,
    borderRadius: 8,
  },
  retryButtonText: {
    fontSize: 16,
    color: '#FFFFFF',
    fontWeight: '500',
  },
});

export default ImportProgressScreen;
